#!/usr/bin/env python

import argparse
import os
from mexec.mesos import Mesos
from mexec.mdocker import Docker
from docker import Client
from functools import partial
from pprint import pprint


def set_mesos_host(hosts):
    hosts_str = (hosts or os.environ.get('MESOS_HOST', ''))
    return hosts_str.split(',') if hosts_str else ''


def print_results(results):
    for result in results:
        print('=' * 200)
        if isinstance(result, str) or isinstance(result, unicode):
            print(result)
        else:
            pprint(result)


if __name__ == '__main__':
    desc = 'Execute commands inside docker containers run by marathon.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('task_id', help='Mesos task id')
    parser.add_argument('action',
                        choices=['exec_container', 'inspect', 'top', 'logs'],
                        help='Action on the container')
    parser.add_argument('--arg', dest='args', action='append', default=[],
                        type=lambda x: x.split('=', 1),
                        help='Arguments of the docker action')
    parser.add_argument('--mesos-master', type=set_mesos_host, default='',
                        help='Mesos master host separated by commas eg: ' +
                             'master-1:5050,master-2:5050,master-3:5050')
    parser.add_argument('--docker-port', default='2376',
                        help='Docker tcp port')

    args = parser.parse_args()

    mesos = Mesos(args.mesos_master)
    tasks = mesos.get_mesos_task_by_name(args.task_id)
    slaves = mesos.get_slave_hostnames(set([task.slave_id for task in tasks]))

    for task in tasks:
        cli = Client(base_url='tcp://{}:{}'.format(slaves[task.slave_id],
                                                   args.docker_port))
        docker = Docker(cli)
        env_var = 'MESOS_TASK_ID={}'.format(task.task_id)

        container_callback = partial(getattr(docker, args.action),
                                     **dict(args.args))
        results = docker.exec_by_env_variable(env_var, container_callback)

        print_results(results)

    if not len(tasks):
        print('No tasks found!')
